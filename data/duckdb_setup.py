import os
import duckdb

DB_PATH = os.path.join(os.getcwd(), "data", "duckdb", "motorcycle_capstone.duckdb")

SCHEMAS = [
    "config",
    "bronze",
    "analysis"
]

TABLES = {
    "config": [
        '''CREATE TABLE IF NOT EXISTS config.ingest_config (
            file_path TEXT PRIMARY KEY,
            ingested_at TIMESTAMP
        )''',
        '''CREATE TABLE IF NOT EXISTS config.transformation_config (
            id INTEGER PRIMARY KEY,
            last_run TIMESTAMP
        )'''
    ],
    "analysis": [
        '''CREATE TABLE IF NOT EXISTS analysis.silver_accident (
            state INTEGER,
            state_name TEXT,
            st_case INTEGER,
            peds INTEGER,
            per_not_mvit INTEGER,
            ve_total INTEGER,
            ve_forms INTEGER,
            pvh_invl INTEGER,
            persons INTEGER,
            per_mvit INTEGER,
            county INTEGER,
            county_name TEXT,
            city INTEGER,
            city_name TEXT,
            month INTEGER,
            month_name TEXT,
            day INTEGER,
            day_name TEXT,
            day_week INTEGER,
            day_week_name TEXT,
            year INTEGER,
            hour INTEGER,
            hour_name TEXT,
            minute INTEGER,
            minute_name TEXT,
            tway_id TEXT,
            tway_id2 TEXT,
            route TEXT,
            routename TEXT,
            rur_urb INTEGER,
            rur_urb_name TEXT,
            func_sys INTEGER,
            func_sys_name TEXT,
            rd_owner INTEGER,
            rd_owner_name TEXT,
            nhs INTEGER,
            nhs_name TEXT,
            sp_jur INTEGER,
            sp_jur_name TEXT,
            milept FLOAT,
            milept_name TEXT,
            latitude FLOAT,
            latitude_name TEXT,
            longitude FLOAT,
            longitude_name TEXT,
            harm_ev INTEGER,
            harm_ev_name TEXT,
            man_coll INTEGER,
            man_coll_name TEXT,
            reljct1 INTEGER,
            reljct1_name TEXT,
            reljct2 INTEGER,
            reljct2_name TEXT,
            typ_int INTEGER,
            typ_int_name TEXT,
            rel_road INTEGER,
            rel_road_name TEXT,
            wrk_zone INTEGER,
            wrk_zone_name TEXT,
            lgt_cond INTEGER,
            lgt_cond_name TEXT,
            weather INTEGER,
            weather_name TEXT,
            sch_bus INTEGER,
            sch_bus_name TEXT,
            rail INTEGER,
            rail_name TEXT,
            not_hour INTEGER,
            not_hour_name TEXT,
            not_min INTEGER,
            not_min_name TEXT,
            arr_hour INTEGER,
            arr_hour_name TEXT,
            arr_min INTEGER,
            arr_min_name TEXT,
            hosp_hr INTEGER,
            hosp_hr_name TEXT,
            hosp_mn INTEGER,
            hosp_mn_name TEXT,
            fatals INTEGER
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_crashrf (
            state INTEGER,
            state_name TEXT,
            st_case INTEGER,
            crashrf INTEGER,
            crashrf_name TEXT
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_damage (
            state INTEGER,
            state_name TEXT,
            st_case INTEGER,
            veh_no INTEGER,
            damage INTEGER,
            damage_name TEXT
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_distract (
            state INTEGER,
            state_name TEXT,
            st_case INTEGER,
            veh_no INTEGER,
            drdistract INTEGER,
            drdistract_name TEXT
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_drimpair (
            state INTEGER,
            state_name TEXT,
            st_case INTEGER,
            veh_no INTEGER,
            drimpair INTEGER,
            drimpair_name TEXT
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_driverrf (
            state INTEGER,
            state_name TEXT,
            st_case INTEGER,
            veh_no INTEGER,
            driverrf INTEGER,
            driverrf_name TEXT
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_drugs (
            state INTEGER,
            state_name TEXT,
            st_case INTEGER,
            veh_no INTEGER,
            per_no INTEGER,
            drugspec INTEGER,
            drugspec_name TEXT,
            drugmethod INTEGER,
            drugmethod_name TEXT,
            drugres INTEGER,
            drugres_name TEXT,
            drugqty INTEGER,
            drugqty_name TEXT,
            drugactqty FLOAT,
            drugactqty_name TEXT,
            druguom INTEGER,
            druguom_name TEXT
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_factor (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            vehiclecc INTEGER,
            vehiclecc_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_maneuver (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            maneuver INTEGER,
            maneuver_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_miacc (
            st_case INTEGER,
            a1 INTEGER,
            a2 INTEGER,
            a3 INTEGER,
            a4 INTEGER,
            a5 INTEGER,
            a6 INTEGER,
            a7 INTEGER,
            a8 INTEGER,
            a9 INTEGER,
            a10 INTEGER
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_midrvacc (
            st_case INTEGER,
            a1 INTEGER,
            a2 INTEGER,
            a3 INTEGER,
            a4 INTEGER,
            a5 INTEGER,
            a6 INTEGER,
            a7 INTEGER,
            a8 INTEGER,
            a9 INTEGER,
            a10 INTEGER
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_miper (
            st_case INTEGER,
            veh_no INTEGER,
            per_no INTEGER,
            p1 INTEGER,
            p2 INTEGER,
            p3 INTEGER,
            p4 INTEGER,
            p5 INTEGER,
            p6 INTEGER,
            p7 INTEGER,
            p8 INTEGER,
            p9 INTEGER,
            p10 INTEGER
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_motorcycle_helmet_laws (
            state VARCHAR,
            required_to_wear_helmet VARCHAR,
            motorcycle_type_vehicles_not_covered VARCHAR,
            footnotes VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_nmcrash (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            per_no INTEGER,
            nmcc INTEGER,
            nmcc_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_nmdistract (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            per_no INTEGER,
            nmdistract INTEGER,
            nmdistract_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_nmimpair (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            per_no INTEGER,
            nmimpair INTEGER,
            nmimpair_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_nmprior (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            per_no INTEGER,
            nmaction INTEGER,
            nmaction_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_parkwork (
            state INTEGER,
            statename VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            pve_forms INTEGER,
            pmonth INTEGER,
            pmonthname VARCHAR,
            pday INTEGER,
            pdayname VARCHAR,
            phour INTEGER,
            phourname VARCHAR,
            pminute INTEGER,
            pminutename VARCHAR,
            pharm_ev INTEGER,
            pharm_evname VARCHAR,
            pman_coll INTEGER,
            pman_collname VARCHAR,
            pnumoccs INTEGER,
            pnumoccsname VARCHAR,
            ptype INTEGER,
            ptypename VARCHAR,
            phit_run INTEGER,
            phit_runname VARCHAR,
            preg_stat INTEGER,
            preg_statname VARCHAR,
            powner INTEGER,
            pownername VARCHAR,
            pvin VARCHAR,
            pvinname VARCHAR,
            pmodyear INTEGER,
            pmodyearname VARCHAR,
            pvpicmake INTEGER,
            pvpicmakename VARCHAR,
            pvpicmodel INTEGER,
            pvpicmodelname VARCHAR,
            pvpicbodyclass INTEGER,
            pvpicbodyclassname VARCHAR,
            pmake INTEGER,
            pmakename VARCHAR,
            pmodel INTEGER,
            pbodytyp INTEGER,
            pbodytypname VARCHAR,
            picfinalbody INTEGER,
            picfinalbodyname VARCHAR,
            pgvwr_from INTEGER,
            pgvwr_fromname VARCHAR,
            pgvwr_to INTEGER,
            pgvwr_toname VARCHAR,
            ptrailer INTEGER,
            ptrailername VARCHAR,
            ptrlr1vin VARCHAR,
            ptrlr1vinname VARCHAR,
            ptrlr2vin VARCHAR,
            ptrlr2vinname VARCHAR,
            ptrlr3vin VARCHAR,
            ptrlr3vinname VARCHAR,
            ptrlr1gvwr INTEGER,
            ptrlr1gvwrname VARCHAR,
            ptrlr2gvwr INTEGER,
            ptrlr2gvwrname VARCHAR,
            ptrlr3gvwr INTEGER,
            ptrlr3gvwrname VARCHAR,
            pmcarr_id VARCHAR,
            pmcarr_idname VARCHAR,
            pmcarr_i1 VARCHAR,
            pmcarr_i1name VARCHAR,
            pmcarr_i2 VARCHAR,
            pmcarr_i2name VARCHAR,
            pv_config INTEGER,
            pv_configname VARCHAR,
            pcargtyp INTEGER,
            pcargtypname VARCHAR,
            phaz_inv INTEGER,
            phaz_invname VARCHAR,
            phazplac VARCHAR,
            phazplacname VARCHAR,
            phaz_id VARCHAR,
            phaz_idname VARCHAR,
            phaz_cno VARCHAR,
            phaz_cnoname VARCHAR,
            phaz_rel VARCHAR,
            phaz_relname VARCHAR,
            pbus_use INTEGER,
            pbus_usename VARCHAR,
            psp_use INTEGER,
            psp_usename VARCHAR,
            pem_use INTEGER,
            pem_usename VARCHAR,
            punderoverride INTEGER,
            punderoverridename VARCHAR,
            pimpact1 INTEGER,
            pimpact1name VARCHAR,
            pveh_sev INTEGER,
            pveh_sevname VARCHAR,
            ptowed INTEGER,
            ptowedname VARCHAR,
            pm_harm INTEGER,
            pm_harmname VARCHAR,
            pfire INTEGER,
            pfirename VARCHAR,
            pmak_mod VARCHAR,
            pmak_modname VARCHAR,
            pvin_1 VARCHAR,
            pvin_2 VARCHAR,
            pvin_3 VARCHAR,
            pvin_4 VARCHAR,
            pvin_5 VARCHAR,
            pvin_6 VARCHAR,
            pvin_7 VARCHAR,
            pvin_8 VARCHAR,
            pvin_9 VARCHAR,
            pvin_10 VARCHAR,
            pvin_11 VARCHAR,
            pvin_12 VARCHAR,
            pdeaths INTEGER
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_pbtype (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            per_no INTEGER,
            pbage INTEGER,
            pbage_name VARCHAR,
            pbsex INTEGER,
            pbsex_name VARCHAR,
            pbptype INTEGER,
            pbptype_name VARCHAR,
            pbcwalk INTEGER,
            pbcwalk_name VARCHAR,
            pbswalk INTEGER,
            pbswalk_name VARCHAR,
            pbszone INTEGER,
            pbszone_name VARCHAR,
            pedctype INTEGER,
            pedctype_name VARCHAR,
            bikectype INTEGER,
            bikectype_name VARCHAR,
            pedloc INTEGER,
            pedloc_name VARCHAR,
            bikeloc INTEGER,
            bikeloc_name VARCHAR,
            pedpos INTEGER,
            pedpos_name VARCHAR,
            bikepos INTEGER,
            bikepos_name VARCHAR,
            peddir INTEGER,
            peddir_name VARCHAR,
            bikedir INTEGER,
            bikedir_name VARCHAR,
            motdir INTEGER,
            motdir_name VARCHAR,
            motman INTEGER,
            motman_name VARCHAR,
            pedleg INTEGER,
            pedleg_name VARCHAR,
            pedsnr INTEGER,
            pedsnr_name VARCHAR,
            pedcgp INTEGER,
            pedcgp_name VARCHAR,
            bikecgp INTEGER,
            bikecgp_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_person (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            per_no INTEGER,
            ve_forms INTEGER,
            county INTEGER,
            month INTEGER,
            month_name VARCHAR,
            day INTEGER,
            day_name VARCHAR,
            hour INTEGER,
            hour_name VARCHAR,
            minute INTEGER,
            minute_name VARCHAR,
            harm_ev INTEGER,
            harm_ev_name VARCHAR,
            man_coll INTEGER,
            man_coll_name VARCHAR,
            sch_bus INTEGER,
            sch_bus_name VARCHAR,
            rur_urb INTEGER,
            rur_urb_name VARCHAR,
            func_sys INTEGER,
            func_sys_name VARCHAR,
            mod_year INTEGER,
            mod_year_name VARCHAR,
            vpicmake INTEGER,
            vpicmake_name VARCHAR,
            vpicmodel INTEGER,
            vpicmodel_name VARCHAR,
            vpicbodyclass INTEGER,
            vpicbodyclass_name VARCHAR,
            make INTEGER,
            make_name VARCHAR,
            body_typ INTEGER,
            body_typ_name VARCHAR,
            icfinalbody INTEGER,
            icfinalbody_name VARCHAR,
            gvwr_from INTEGER,
            gvwr_from_name VARCHAR,
            gvwr_to INTEGER,
            gvwr_to_name VARCHAR,
            tow_veh INTEGER,
            tow_veh_name VARCHAR,
            spec_use INTEGER,
            spec_use_name VARCHAR,
            emer_use INTEGER,
            emer_use_name VARCHAR,
            rollover INTEGER,
            rollover_name VARCHAR,
            impact1 INTEGER,
            impact1_name VARCHAR,
            fire_exp INTEGER,
            fire_exp_name VARCHAR,
            mak_mod VARCHAR,
            mak_mod_name VARCHAR,
            age INTEGER,
            age_name VARCHAR,
            sex INTEGER,
            sex_name VARCHAR,
            per_typ INTEGER,
            per_typ_name VARCHAR,
            inj_sev INTEGER,
            inj_sev_name VARCHAR,
            seat_pos INTEGER,
            seat_pos_name VARCHAR,
            rest_use INTEGER,
            rest_use_name VARCHAR,
            rest_mis INTEGER,
            rest_mis_name VARCHAR,
            helm_use INTEGER,
            helm_use_name VARCHAR,
            helm_mis INTEGER,
            helm_mis_name VARCHAR,
            air_bag INTEGER,
            air_bag_name VARCHAR,
            ejection INTEGER,
            ejection_name VARCHAR,
            ej_path INTEGER,
            ej_path_name VARCHAR,
            extricat INTEGER,
            extricat_name VARCHAR,
            drinking INTEGER,
            drinking_name VARCHAR,
            alc_status INTEGER,
            alc_status_name VARCHAR,
            atst_typ INTEGER,
            atst_typ_name VARCHAR,
            alc_res INTEGER,
            alc_res_name VARCHAR,
            drugs INTEGER,
            drugs_name VARCHAR,
            dstatus INTEGER,
            dstatus_name VARCHAR,
            hospital INTEGER,
            hospital_name VARCHAR,
            doa INTEGER,
            doa_name VARCHAR,
            death_mo INTEGER,
            death_mo_name VARCHAR,
            death_da INTEGER,
            death_da_name VARCHAR,
            death_yr INTEGER,
            death_yr_name VARCHAR,
            death_tm INTEGER,
            death_tm_name VARCHAR,
            death_hr INTEGER,
            death_hr_name VARCHAR,
            death_mn INTEGER,
            death_mn_name VARCHAR,
            lag_hrs INTEGER,
            lag_hrs_name VARCHAR,
            lag_mins INTEGER,
            lag_mins_name VARCHAR,
            str_veh INTEGER,
            devtype VARCHAR,
            devtype_name VARCHAR,
            devmotor VARCHAR,
            devmotor_name VARCHAR,
            location VARCHAR,
            location_name VARCHAR,
            work_inj INTEGER,
            work_inj_name VARCHAR,
            hispanic INTEGER,
            hispanic_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_personrf (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            per_no INTEGER,
            personrf INTEGER,
            personrf_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_pvehiclesf (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            pvehiclesf INTEGER,
            pvehiclesf_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_race (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            per_no INTEGER,
            race INTEGER,
            race_name VARCHAR,
            "order" INTEGER,
            order_name VARCHAR,
            multrace INTEGER,
            multrace_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_safetyeq (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            per_no INTEGER,
            nmhelmet INTEGER,
            nmhelmet_name VARCHAR,
            nmpropad INTEGER,
            nmpropad_name VARCHAR,
            nmothpro INTEGER,
            nmothpro_name VARCHAR,
            nmrefclo INTEGER,
            nmrefclo_name VARCHAR,
            nmlight INTEGER,
            nmlight_name VARCHAR,
            nmothpre INTEGER,
            nmothpre_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_vehicle (
            state INTEGER,
            statename VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            ve_forms INTEGER,
            month INTEGER,
            monthname VARCHAR,
            day INTEGER,
            dayname VARCHAR,
            hour INTEGER,
            hourname VARCHAR,
            minute INTEGER,
            minutename VARCHAR,
            harm_ev INTEGER,
            harm_evname VARCHAR,
            man_coll INTEGER,
            man_collname VARCHAR,
            numoccs INTEGER,
            numoccsname VARCHAR,
            unittype INTEGER,
            unittypename VARCHAR,
            hit_run INTEGER,
            hit_runname VARCHAR,
            reg_stat INTEGER,
            reg_statname VARCHAR,
            owner INTEGER,
            ownername VARCHAR,
            vin VARCHAR,
            vinname VARCHAR,
            mod_year INTEGER,
            mod_yearname VARCHAR,
            vpicmake INTEGER,
            vpicmakename VARCHAR,
            vpicmodel INTEGER,
            vpicmodelname VARCHAR,
            vpicbodyclass INTEGER,
            vpicbodyclassname VARCHAR,
            make INTEGER,
            makename VARCHAR,
            body_typ INTEGER,
            body_typname VARCHAR,
            icfinalbody INTEGER,
            icfinalbodyname VARCHAR,
            gvwr_from INTEGER,
            gvwr_fromname VARCHAR,
            gvwr_to INTEGER,
            gvwr_toname VARCHAR,
            tow_veh INTEGER,
            tow_vehname VARCHAR,
            trlr1vin VARCHAR,
            trlr1vinname VARCHAR,
            trlr2vin VARCHAR,
            trlr2vinname VARCHAR,
            trlr3vin VARCHAR,
            trlr3vinname VARCHAR,
            trlr1gvwr INTEGER,
            trlr1gvwrname VARCHAR,
            trlr2gvwr INTEGER,
            trlr2gvwrname VARCHAR,
            trlr3gvwr INTEGER,
            trlr3gvwrname VARCHAR,
            j_knife INTEGER,
            j_knifename VARCHAR,
            mcarr_id VARCHAR,
            mcarr_idname VARCHAR,
            mcarr_i1 VARCHAR,
            mcarr_i1name VARCHAR,
            mcarr_i2 VARCHAR,
            mcarr_i2name VARCHAR,
            v_config INTEGER,
            v_configname VARCHAR,
            cargo_bt INTEGER,
            cargo_btname VARCHAR,
            haz_inv INTEGER,
            haz_invname VARCHAR,
            haz_plac INTEGER,
            haz_placname VARCHAR,
            haz_id VARCHAR,
            haz_idname VARCHAR,
            haz_cno VARCHAR,
            haz_cnoname VARCHAR,
            haz_rel INTEGER,
            haz_relname VARCHAR,
            bus_use INTEGER,
            bus_usename VARCHAR,
            spec_use INTEGER,
            spec_usename VARCHAR,
            emer_use INTEGER,
            emer_usename VARCHAR,
            trav_sp INTEGER,
            trav_spname VARCHAR,
            underoverride INTEGER,
            underoverridename VARCHAR,
            rollover INTEGER,
            rollovername VARCHAR,
            rolinloc INTEGER,
            rolinlocname VARCHAR,
            impact1 INTEGER,
            impact1name VARCHAR,
            deformed INTEGER,
            deformedname VARCHAR,
            towed INTEGER,
            towedname VARCHAR,
            m_harm INTEGER,
            m_harmname VARCHAR,
            fire_exp INTEGER,
            fire_expname VARCHAR,
            mak_mod VARCHAR,
            mak_modname VARCHAR,
            vin_1 VARCHAR,
            vin_2 VARCHAR,
            vin_3 VARCHAR,
            vin_4 VARCHAR,
            vin_5 VARCHAR,
            vin_6 VARCHAR,
            vin_7 VARCHAR,
            vin_8 VARCHAR,
            vin_9 VARCHAR,
            vin_10 VARCHAR,
            vin_11 VARCHAR,
            vin_12 VARCHAR,
            dr_drink INTEGER,
            dr_drinkname VARCHAR,
            dr_pres INTEGER,
            dr_presname VARCHAR,
            l_state INTEGER,
            l_statename VARCHAR,
            dr_zip VARCHAR,
            dr_zipname VARCHAR,
            l_type INTEGER,
            l_typename VARCHAR,
            l_status INTEGER,
            l_statusname VARCHAR,
            cdl_stat INTEGER,
            cdl_statname VARCHAR,
            l_endors INTEGER,
            l_endorsname VARCHAR,
            l_compl INTEGER,
            l_complname VARCHAR,
            l_restri INTEGER,
            l_restriname VARCHAR,
            dr_hgt INTEGER,
            dr_hgtname VARCHAR,
            dr_wgt INTEGER,
            dr_wgtname VARCHAR,
            prev_acc INTEGER,
            prev_accname VARCHAR,
            prev_sus1 INTEGER,
            prev_sus1name VARCHAR,
            prev_sus2 INTEGER,
            prev_sus2name VARCHAR,
            prev_sus3 INTEGER,
            prev_sus3name VARCHAR,
            prev_dwi INTEGER,
            prev_dwiname VARCHAR,
            prev_spd INTEGER,
            prev_spdname VARCHAR,
            prev_oth INTEGER,
            prev_othname VARCHAR,
            first_mo INTEGER,
            first_moname VARCHAR,
            first_yr INTEGER,
            first_yrname VARCHAR,
            last_mo INTEGER,
            last_moname VARCHAR,
            last_yr INTEGER,
            last_yrname VARCHAR,
            speedrel INTEGER,
            speedrelname VARCHAR,
            vtrafway INTEGER,
            vtrafwayname VARCHAR,
            vnum_lan INTEGER,
            vnum_lanname VARCHAR,
            vspd_lim INTEGER,
            vspd_limname VARCHAR,
            valign INTEGER,
            valignname VARCHAR,
            vprofile INTEGER,
            vprofilename VARCHAR,
            vpavetyp INTEGER,
            vpavetypname VARCHAR,
            vsurcond INTEGER,
            vsurcondname VARCHAR,
            vtrafcon INTEGER,
            vtrafconname VARCHAR,
            vtcont_f INTEGER,
            vtcont_fname VARCHAR,
            p_crash1 INTEGER,
            p_crash1name VARCHAR,
            p_crash2 INTEGER,
            p_crash2name VARCHAR,
            p_crash3 INTEGER,
            p_crash3name VARCHAR,
            pcrash4 INTEGER,
            pcrash4name VARCHAR,
            pcrash5 INTEGER,
            pcrash5name VARCHAR,
            acc_type INTEGER,
            acc_typename VARCHAR,
            acc_config INTEGER,
            acc_configname VARCHAR,
            model VARCHAR,
            deaths INTEGER
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_vehiclesf (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            vehiclesf INTEGER,
            vehiclesf_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_vevent (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            eventnum INTEGER,
            veh_no INTEGER,
            veventnum INTEGER,
            vnumber1 INTEGER,
            aoi1 INTEGER,
            aoi1_name VARCHAR,
            soe INTEGER,
            soe_name VARCHAR,
            vnumber2 INTEGER,
            vnumber2_name VARCHAR,
            aoi2 INTEGER,
            aoi2_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_violatn (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            violation INTEGER,
            violation_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_vision (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            vision INTEGER,
            vision_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_vpicdecode (
            state INTEGER,
            statename VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            vehicledescriptor VARCHAR,
            vindecodedon VARCHAR,
            vindecodeerror INTEGER,
            vehicletypeid INTEGER,
            vehicletype VARCHAR,
            manufacturerfullnameid INTEGER,
            manufacturerfullname VARCHAR,
            makeid INTEGER,
            make VARCHAR,
            modelid INTEGER,
            model VARCHAR,
            modelyear INTEGER,
            series VARCHAR,
            trim VARCHAR,
            series2 VARCHAR,
            trim2 VARCHAR,
            plantcountryid INTEGER,
            plantcountry VARCHAR,
            plantstate VARCHAR,
            plantcity VARCHAR,
            plantcompanyname VARCHAR,
            destinationmarketid INTEGER,
            destinationmarket VARCHAR,
            baseprice DOUBLE,
            nonlanduseid INTEGER,
            nonlanduse VARCHAR,
            note VARCHAR,
            bodyclassid INTEGER,
            bodyclass VARCHAR,
            doorscount INTEGER,
            windows INTEGER,
            wheelbasetypeid INTEGER,
            wheelbasetype VARCHAR,
            trackwidthin DOUBLE,
            grossvehicleweightratingfromid INTEGER,
            grossvehicleweightratingfrom VARCHAR,
            grossvehicleweightratingtoid INTEGER,
            grossvehicleweightratingto VARCHAR,
            grosscombweightratingfromid INTEGER,
            grosscombweightratingfrom VARCHAR,
            grosscombweightratingtoid INTEGER,
            grosscombweightratingto VARCHAR,
            curbweightlb DOUBLE,
            wheelbasein_from DOUBLE,
            wheelbasein_to DOUBLE,
            wheelscount INTEGER,
            wheelsizefrontin DOUBLE,
            wheelsizerearin DOUBLE,
            truckbodycabtypeid INTEGER,
            truckbodycabtype VARCHAR,
            truckbedtypeid INTEGER,
            truckbedtype VARCHAR,
            truckbedlengthin DOUBLE,
            bustypeid INTEGER,
            bustype VARCHAR,
            busfloorconfigurationtypeid INTEGER,
            busfloorconfigurationtype VARCHAR,
            buslengthft DOUBLE,
            otherbusinfo VARCHAR,
            custommotorcycletypeid INTEGER,
            custommotorcycletype VARCHAR,
            motorcyclesuspensiontypeid INTEGER,
            motorcyclesuspensiontype VARCHAR,
            motorcyclechassistypeid INTEGER,
            motorcyclechassistype VARCHAR,
            othermotorcycleinfo VARCHAR,
            steeringlocationid INTEGER,
            steeringlocation VARCHAR,
            entertainmentsystemid INTEGER,
            entertainmentsystem VARCHAR,
            seatscount INTEGER,
            seatrowscount INTEGER,
            transmissionspeeds INTEGER,
            transmissionstyleid INTEGER,
            transmissionstyle VARCHAR,
            drivetypeid INTEGER,
            drivetype VARCHAR,
            axlescount INTEGER,
            axleconfigurationid INTEGER,
            axleconfiguration VARCHAR,
            brakesystemtypeid INTEGER,
            brakesystemtype VARCHAR,
            brakesystemdesc VARCHAR,
            evdriveunitid INTEGER,
            evdriveunit VARCHAR,
            batterykwh_from DOUBLE,
            batterykwh_to DOUBLE,
            batteryv_from DOUBLE,
            batteryv_to DOUBLE,
            batterya_from DOUBLE,
            batterya_to DOUBLE,
            batterypackspervehicle INTEGER,
            batterymodulesperpack INTEGER,
            batterycellspermodule INTEGER,
            batterytypeid INTEGER,
            batterytype VARCHAR,
            otherbatteryinfo VARCHAR,
            chargerlevelid INTEGER,
            chargerlevel VARCHAR,
            chargerpowerkw DOUBLE,
            enginemanufacturer VARCHAR,
            enginemodel VARCHAR,
            engineconfigurationid INTEGER,
            engineconfiguration VARCHAR,
            enginepowerkw DOUBLE,
            enginestrokecycles INTEGER,
            enginecylinderscount INTEGER,
            enginebrakehp_from DOUBLE,
            enginebrakehp_to DOUBLE,
            enginecoolingtypeid INTEGER,
            enginecoolingtype VARCHAR,
            displacementci DOUBLE,
            displacementcc DOUBLE,
            displacementl DOUBLE,
            fueltypeprimaryid INTEGER,
            fueltypeprimary VARCHAR,
            fueltypesecondaryid INTEGER,
            fueltypesecondary VARCHAR,
            fueldeliveryinjectiontypeid INTEGER,
            fueldeliveryinjectiontype VARCHAR,
            enginevalvetraindesignid INTEGER,
            enginevalvetraindesign VARCHAR,
            engineelectrificationlevelid INTEGER,
            engineelectrificationlevel VARCHAR,
            engineturboid INTEGER,
            engineturbo VARCHAR,
            topspeedmph DOUBLE,
            otherengineinfo VARCHAR,
            seatbelttypeid INTEGER,
            seatbelttype VARCHAR,
            pretensionerid INTEGER,
            pretensioner VARCHAR,
            airbaglocfrontid INTEGER,
            airbaglocfront VARCHAR,
            airbaglockneeid INTEGER,
            airbaglocknee VARCHAR,
            airbaglocsideid INTEGER,
            airbaglocside VARCHAR,
            airbagloccurtainid INTEGER,
            airbagloccurtain VARCHAR,
            airbaglocseatcushionid INTEGER,
            airbaglocseatcushion VARCHAR,
            otherrestraintsysteminfo VARCHAR,
            forwardcollisionwarningid INTEGER,
            forwardcollisionwarning VARCHAR,
            dynamicbrakesupportid INTEGER,
            dynamicbrakesupport VARCHAR,
            crashimminentbrakingid INTEGER,
            crashimminentbraking VARCHAR,
            pedestrianautoemergencybrakingid INTEGER,
            pedestrianautoemergencybraking VARCHAR,
            blindspotwarningid INTEGER,
            blindspotwarning VARCHAR,
            blindspotinterventionid INTEGER,
            blindspotintervention VARCHAR,
            lanedeparturewarningid INTEGER,
            lanedeparturewarning VARCHAR,
            lanekeepingassistanceid INTEGER,
            lanekeepingassistance VARCHAR,
            lanecenteringassistanceid INTEGER,
            lanecenteringassistance VARCHAR,
            backupcameraid INTEGER,
            backupcamera VARCHAR,
            rearcrosstrafficalertid INTEGER,
            rearcrosstrafficalert VARCHAR,
            rearautomaticemergencybrakingid INTEGER,
            rearautomaticemergencybraking VARCHAR,
            parkassistid INTEGER,
            parkassist VARCHAR,
            daytimerunninglightid INTEGER,
            daytimerunninglight VARCHAR,
            headlamplightsourceid INTEGER,
            headlamplightsource VARCHAR,
            semiautoheadlampbeamswitchingid INTEGER,
            semiautoheadlampbeamswitching VARCHAR,
            adaptivedrivingbeamid INTEGER,
            adaptivedrivingbeam VARCHAR,
            adaptivecruisecontrolid INTEGER,
            adaptivecruisecontrol VARCHAR,
            antilockbrakesystemid INTEGER,
            antilockbrakesystem VARCHAR,
            electronicstabilitycontrolid INTEGER,
            electronicstabilitycontrol VARCHAR,
            tpmsid INTEGER,
            tpms VARCHAR,
            automaticcrashnotificationid INTEGER,
            automaticcrashnotification VARCHAR,
            eventdatarecorderid INTEGER,
            eventdatarecorder VARCHAR,
            tractioncontrolid INTEGER,
            tractioncontrol VARCHAR,
            auto pedestrianalertingsoundid INTEGER,
            auto pedestrianalertingsound VARCHAR,
            keylessignitionid INTEGER,
            keylessignition VARCHAR,
            saeautomationlevel_from INTEGER,
            saeautomationlevel_to INTEGER,
            autoreversesystemid INTEGER,
            autoreversesystem VARCHAR,
            activesafetysysnote VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_vpictrailerdecode (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            trailer_no INTEGER,
            vehicledescriptor VARCHAR,
            vindecodedon VARCHAR,
            vindecodeerror INTEGER,
            vehicletypeid INTEGER,
            vehicletype VARCHAR,
            manufacturerfullnameid INTEGER,
            manufacturerfullname VARCHAR,
            makeid INTEGER,
            make VARCHAR,
            modelid INTEGER,
            model VARCHAR,
            modelyear INTEGER,
            series VARCHAR,
            trim VARCHAR,
            plantcountryid INTEGER,
            plantcountry VARCHAR,
            plantstate VARCHAR,
            plantcity VARCHAR,
            plantcompanyname VARCHAR,
            nonlanduseid INTEGER,
            nonlanduse VARCHAR,
            note VARCHAR,
            bodyclassid INTEGER,
            bodyclass VARCHAR,
            grossvehicleweightratingfromid INTEGER,
            grossvehicleweightratingfrom VARCHAR,
            grossvehicleweightratingtoid INTEGER,
            grossvehicleweightratingto VARCHAR,
            trailerbodytypeid INTEGER,
            trailerbodytype VARCHAR,
            trailertypeconnectionid INTEGER,
            trailertypeconnection VARCHAR,
            trailerlengthft DOUBLE,
            othertrailerinfo VARCHAR,
            axlescount INTEGER,
            axleconfigurationid INTEGER,
            axleconfiguration VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_vsoe (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            veh_no INTEGER,
            veventnum INTEGER,
            soe INTEGER,
            soe_name VARCHAR,
            aoi INTEGER,
            aoi_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_weather (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            weather INTEGER,
            weather_name VARCHAR
        )'''
        '''CREATE TABLE IF NOT EXISTS analysis.silver_cevent (
            state INTEGER,
            state_name VARCHAR,
            st_case INTEGER,
            event_num INTEGER,
            vnumber1 INTEGER,
            aoi1 INTEGER,
            aoi1_name VARCHAR,
            soe INTEGER,
            soe_name VARCHAR,
            vnumber2 INTEGER,
            vnumber2_name VARCHAR,
            aoi2 INTEGER,
            aoi2_name VARCHAR
        )'''
    ]
}

def setup_duckdb():
    con = duckdb.connect(DB_PATH)
    for schema in SCHEMAS:
        con.execute(f"CREATE SCHEMA IF NOT EXISTS {schema}")
    for schema, table_sqls in TABLES.items():
        for sql in table_sqls:
            con.execute(sql)
    con.close()
    print("DuckDB setup complete: schemas and config tables created.")

if __name__ == "__main__":
    setup_duckdb()
